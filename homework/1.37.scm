(load "util.scm")

(define (cont-frac n d k)
  (define (cont-frac-rec i)
          (if (= k i)
              (/ (n i) (d i))
              (/ (n i) (+ (d i) (cont-frac-rec (+ i 1)))))
  )
  (cont-frac-rec 1)
)

(define (cont-frac n d k)
  (define (iter i prev)
    (if (= i 1)
        (/ (n i) (+ (d i) prev))
        (iter (- i 1) (/ (n i) (+ (d i) prev))))
  )
  (iter (- k 1) (/ (n k) (d k)))
)

(fix-point (lambda (x) (+ 1 (/ 1 x))) 1.0)
(/ 1.0 (cont-frac (lambda (i) 1.0)
                  (lambda (i) 1.0)
                  10))
(/ 1.0 (cont-frac (lambda (i) 1.0)
                  (lambda (i) 1.0)
                  100))
(/ 1.0 (cont-frac (lambda (i) 1.0)
                  (lambda (i) 1.0)
                  1000))